version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: stream-detection-api:latest
    container_name: stream-detection-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - MODEL_DEVICE=${MODEL_DEVICE:-cpu}
      - API_WORKERS=4
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./models:/app/models
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  prometheus:
    image: prom/prometheus:latest
    container_name: stream-detection-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: stream-detection-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge

# Configurações específicas para desenvolvimento
x-dev:
  &dev-config
  api:
    build:
      target: builder
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload

# Configurações específicas para produção
x-prod:
  &prod-config
  api:
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

# Perfis de configuração
profiles:
  dev:
    extends:
      file: docker-compose.yml
      service: api
    <<: *dev-config

  prod:
    extends:
      file: docker-compose.yml
      service: api
    <<: *prod-config 